#!/usr/bin/env perl

# Parameters supported:
#
# config
# autoconf
#
# Magic markers:
#%# family=auto
#%# capabilities=autoconf

use strict;
use warnings;
use LWP;
use JSON qw/decode_json/;

=head1 NAME

elasticsearch_cluster_shards - A munin plugin that collects shard stats of your elasticsearch instances

=head1 APPLICABLE SYSTEMS

Elasticsearch

=head1 CONFIGURATION

None

=head1 BUGS

None known so far. If you find any, let me know.

=head1 AUTHOR

Tomas Doran (t0m) - c<< <bobtfish@bobtfish.net> >>
Kentaro Yoshida - https://github.com/y-ken

=cut

my $host = exists $ENV{'host'} ? $ENV{'host'} : 'localhost';
my $port = exists $ENV{'port'} ? $ENV{'port'} : 9200;
my $proto = exists $ENV{'proto'} ? $ENV{'proto'} : 'http://';
my $user  = exists $ENV{'user'} ? $ENV{'user'} : '';
my $password = exists $ENV{'password'} ? $ENV{'password'} : '';

my $ua = LWP::UserAgent->new;
$ua->timeout(10);

sub get_json_from_url {
  my $uri = shift;
  my $x_user = shift;
  my $x_password = shift;
  my $request = GET $uri;

  if ($x_user =~ '' && $x_password =~ '') {
    $request->authorization_basic($x_user, $x_password);
  }

  my $res = $ua->request($request);
  Carp::confess($res->code . " for " . $uri) unless $res->is_success;
  my $data = do { local $@; eval { decode_json($res->content) } };
  die("Could not decode JSON from: " . $res->content) unless $data;
  return $data;
}

my $data = get_json_from_url("http://$host:$port/_cluster/health");

if ($ARGV[0] and $ARGV[0] eq 'config') {
    print "graph_title Elasticsearch cluster shards\n";
    print "graph_category elasticsearch\n";
    print "graph_scale no\n";

    foreach my $name (grep { /_shards$/ } sort(keys %$data)) {
        print "$name.label $name\n"."$name.type GAUGE\n";
    }
}
elsif (!$ARGV[0] || $ARGV[0] eq 'autoconf') {
    foreach my $name (grep { /_shards$/ } sort(keys %$data)) {
        print "$name.value " . $data->{$name} . "\n";
    }
}

exit(0);
